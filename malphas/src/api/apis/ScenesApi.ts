// tslint:disable
/**
 * Malphas Backend
 * Endpoint documentation for the Malphas Backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    SceneCreationDto,
    SceneDto,
    SceneUpdateDto,
} from '../models';

export interface CreateSceneRequest {
    sceneCreationDto: SceneCreationDto;
}

export interface DeleteSceneRequest {
    id?: string;
}

export interface UpdateSceneRequest {
    sceneUpdateDto: SceneUpdateDto;
}

/**
 * no description
 */
export class ScenesApi extends BaseAPI {

    /**
     * Create a new scene
     * Create a new scene
     */
    createScene({ sceneCreationDto }: CreateSceneRequest): Observable<void>
    createScene({ sceneCreationDto }: CreateSceneRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    createScene({ sceneCreationDto }: CreateSceneRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(sceneCreationDto, 'sceneCreationDto', 'createScene');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/scene',
            method: 'POST',
            headers,
            body: sceneCreationDto,
        }, opts?.responseOpts);
    };

    /**
     * Delete an existing scene
     * Delete an existing scene
     */
    deleteScene({ id }: DeleteSceneRequest): Observable<void>
    deleteScene({ id }: DeleteSceneRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deleteScene({ id }: DeleteSceneRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (id != null) { query['id'] = id; }

        return this.request<void>({
            url: '/scene',
            method: 'DELETE',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all the scenes of the current user
     * Get All Scenes
     */
    listAllScenes(): Observable<Array<SceneDto>>
    listAllScenes(opts?: OperationOpts): Observable<AjaxResponse<Array<SceneDto>>>
    listAllScenes(opts?: OperationOpts): Observable<Array<SceneDto> | AjaxResponse<Array<SceneDto>>> {
        return this.request<Array<SceneDto>>({
            url: '/scene',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Update an existing scene
     * Update an existing scene
     */
    updateScene({ sceneUpdateDto }: UpdateSceneRequest): Observable<void>
    updateScene({ sceneUpdateDto }: UpdateSceneRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    updateScene({ sceneUpdateDto }: UpdateSceneRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(sceneUpdateDto, 'sceneUpdateDto', 'updateScene');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/scene',
            method: 'PUT',
            headers,
            body: sceneUpdateDto,
        }, opts?.responseOpts);
    };

}
